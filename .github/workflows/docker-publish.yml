name: Build and Push Nginx Images

on:
  push:
    branches: [main]
    paths:
      - nginx-logrotate/**
      - nginx-logrotate-geoip/**
  pull_request:
    branches: [main]
    paths:
      - nginx-logrotate/**
      - nginx-logrotate-geoip/**
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        module: [nginx-logrotate, nginx-logrotate-geoip]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Find changed directories
        id: changed_dirs
        run: |
          echo "Detecting changed directories..."
          # Use different git diff base for push and pull_request events
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_DIRS=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} | awk -F/ '{print $1}' | sort -u | sed -z 's/\n/,/g;s/^/[/;s/,$/]/;s/$/\n/')
            echo "Changed directories:"
            echo "$CHANGED_DIRS"
            echo "CHANGED_DIR=$CHANGED_DIRS" >> ${GITHUB_ENV}
          else
            # For push, always build all modules
            echo "Building all modules on push to main."
            echo "CHANGED_DIR=[nginx-logrotate,nginx-logrotate-geoip]" >> ${GITHUB_ENV}
          fi
      
      - name: Build and Push Docker images
        if: contains(env.CHANGED_DIR, matrix.module)
        run: |
          # Function to print formatted messages
          function log() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
          }

          MODULE=${{ matrix.module }}
          DIR="$MODULE"

          # Check if the directory exists
          if [[ ! -d "$DIR" ]]; then
            log "Error: The directory '$DIR' does not exist."
            exit 1
          fi

          log "Starting process for module: $MODULE"
          log "Selected directory: $DIR"

          # Change to the module directory
          cd "$DIR" || { log "Error: Could not change to directory '$DIR'"; exit 1; }

          # Extract the Nginx version from the Dockerfile (compatible with format nginx:<version>-alpine)
          NGINX_VERSION=$(grep -oP '(?<=FROM nginx:)[^ ]+' "Dockerfile" | head -1)

          if [[ -z "$NGINX_VERSION" ]]; then
            log "No Nginx version found in file '$DIR/Dockerfile'. Skipping..."
            exit 1
          fi

          log "Detected Nginx version: $NGINX_VERSION"

          # Set tag suffix for pull_request
          TAG_SUFFIX=""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG_SUFFIX="-beta"
          fi

          # Define the image name and tag
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/$DIR"
          IMAGE_TAG="$NGINX_VERSION$TAG_SUFFIX"

          log "Image name: $IMAGE_NAME"
          log "Image tag: $IMAGE_TAG"

          # Build the Docker image
          log "Starting image build: $IMAGE_NAME:$IMAGE_TAG"
          if docker build --no-cache -t "$IMAGE_NAME:$IMAGE_TAG" .; then
            log "Image built successfully."
          else
            log "Error: Image build failed."
            exit 1
          fi

          # Push the image to Docker Hub
          log "Pushing image '$IMAGE_NAME:$IMAGE_TAG' to Docker Hub..."
          if docker push "$IMAGE_NAME:$IMAGE_TAG"; then
            log "Image pushed successfully."
          else
            log "Error: Could not push image to Docker Hub."
            exit 1
          fi

          log "Process completed for module: $MODULE"

